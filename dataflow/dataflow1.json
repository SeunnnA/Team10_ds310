{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vm_metrics",
						"type": "DatasetReference"
					},
					"name": "vmmetrics"
				},
				{
					"dataset": {
						"referenceName": "SQLcovid_parquet",
						"type": "DatasetReference"
					},
					"name": "azuremetrics"
				},
				{
					"dataset": {
						"referenceName": "ODSPolicyParquet",
						"type": "DatasetReference"
					},
					"name": "PolicySource"
				},
				{
					"dataset": {
						"referenceName": "ODSGeoParquet",
						"type": "DatasetReference"
					},
					"name": "GeographySource"
				},
				{
					"dataset": {
						"referenceName": "ODSDatesParquet",
						"type": "DatasetReference"
					},
					"name": "DateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ODScases_sink",
						"type": "DatasetReference"
					},
					"name": "cases"
				},
				{
					"dataset": {
						"referenceName": "ODSdeaths_sink",
						"type": "DatasetReference"
					},
					"name": "deaths"
				},
				{
					"dataset": {
						"referenceName": "ODSRecoveries_sink",
						"type": "DatasetReference"
					},
					"name": "recoveries"
				},
				{
					"dataset": {
						"referenceName": "Final_policy",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union"
				},
				{
					"name": "selectcases"
				},
				{
					"name": "selectdeaths"
				},
				{
					"name": "selectrecoveries"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> vmmetrics",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> azuremetrics",
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as timestamp,",
				"          C1_School_closing as long,",
				"          C1_Flag as double,",
				"          C2_Workplace_closing as long,",
				"          C2_Flag as double,",
				"          C3_Cancel_public_events as double,",
				"          C3_Flag as double,",
				"          C4_Restrictions_on_gatherings as double,",
				"          C4_Flag as double,",
				"          C5_Close_public_transport as double,",
				"          C5_Flag as double,",
				"          C6_Stay_at_home_requirements as double,",
				"          C6_Flag as double,",
				"          C7_Restrictions_on_internal_movement as double,",
				"          C7_Flag as double,",
				"          C8_International_travel_controls as double,",
				"          E1_Income_support as long,",
				"          E1_Flag as double,",
				"          E2_Debt_contract_relief as double,",
				"          E3_Fiscal_measures as double,",
				"          E4_International_support as double,",
				"          H1_Public_information_campaigns as double,",
				"          H1_Flag as double,",
				"          H2_Testing_policy as double,",
				"          H3_Contact_tracing as double,",
				"          H4_Emergency_investment_in_healthcare as double,",
				"          H5_Investment_in_vaccines as double,",
				"          H6_Facial_Coverings as double,",
				"          H6_Flag as double,",
				"          H7_Vaccination_policy as double,",
				"          H7_Flag as double,",
				"          H8_Protection_of_elderly_people as double,",
				"          H8_Flag as double,",
				"          M1_Wildcard as double,",
				"          StringencyIndex as double,",
				"          StringencyIndexForDisplay as double,",
				"          StringencyLegacyIndex as double,",
				"          StringencyLegacyIndexForDisplay as double,",
				"          GovernmentResponseIndex as double,",
				"          GovernmentResponseIndexForDisplay as double,",
				"          ContainmentHealthIndex as double,",
				"          ContainmentHealthIndexForDisplay as double,",
				"          EconomicSupportIndex as double,",
				"          EconomicSupportIndexForDisplay as double,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PolicySource",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> GeographySource",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DateSource",
				"vmmetrics, azuremetrics union(byName: true)~> union",
				"union select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          CountryCode = ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcases",
				"union select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Deaths,",
				"          Deaths_Change,",
				"          CountryCode = ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdeaths",
				"union select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Recovered,",
				"          Recovered_Change,",
				"          CountryCode = ISO3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrecoveries",
				"derivedColumn4 select(mapColumn(",
				"          CountryName,",
				"          CountryCode,",
				"          RegionName,",
				"          RegionCode,",
				"          Jurisdiction,",
				"          Date,",
				"          C1_School_closing,",
				"          C1_Flag,",
				"          C2_Workplace_closing,",
				"          C2_Flag,",
				"          C3_Cancel_public_events,",
				"          C3_Flag,",
				"          C4_Restrictions_on_gatherings,",
				"          C4_Flag,",
				"          C5_Close_public_transport,",
				"          C5_Flag,",
				"          C6_Stay_at_home_requirements,",
				"          C6_Flag,",
				"          C7_Restrictions_on_internal_movement,",
				"          C7_Flag,",
				"          C8_International_travel_controls,",
				"          E1_Income_support,",
				"          E1_Flag,",
				"          E2_Debt_contract_relief,",
				"          E3_Fiscal_measures,",
				"          E4_International_support,",
				"          H1_Public_information_campaigns,",
				"          H1_Flag,",
				"          H2_Testing_policy,",
				"          H3_Contact_tracing,",
				"          H4_Emergency_investment_in_healthcare,",
				"          H5_Investment_in_vaccines,",
				"          H6_Facial_Coverings,",
				"          H6_Flag,",
				"          H7_Vaccination_policy,",
				"          H7_Flag,",
				"          H8_Protection_of_elderly_people,",
				"          H8_Flag,",
				"          M1_Wildcard,",
				"          StringencyIndex,",
				"          StringencyIndexForDisplay,",
				"          StringencyLegacyIndex,",
				"          StringencyLegacyIndexForDisplay,",
				"          GovernmentResponseIndex,",
				"          GovernmentResponseIndexForDisplay,",
				"          ContainmentHealthIndex,",
				"          ContainmentHealthIndexForDisplay,",
				"          EconomicSupportIndex,",
				"          EconomicSupportIndexForDisplay,",
				"          id,",
				"          {_rid},",
				"          {_self},",
				"          {_etag},",
				"          {_attachments},",
				"          {_ts},",
				"          UniqueID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"selectrecoveries derive(UniqueID = concat(toString(Updated), CountryCode)) ~> derivedColumn1",
				"selectdeaths derive(UniqueID = concat(toString(Updated), CountryCode)) ~> derivedColumn2",
				"selectcases derive(UniqueID = concat(toString(Updated), CountryCode)) ~> derivedColumn3",
				"cast1 derive(UniqueID = concat(toString(Date), CountryCode)) ~> derivedColumn4",
				"PolicySource cast(output(",
				"          Date as date",
				"     ),",
				"     errors: true) ~> cast1",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['cases.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> cases",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['deaths.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> deaths",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['recoveries.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> recoveries",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['final_policy.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}